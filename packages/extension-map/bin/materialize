#!/usr/bin/env node

/** ShExMap serializer -- used in conjunction with validator's .val output, e.g.
 *
 * shex.js/bin/validate -d data.ttl -x sourceSchema.shex -s StartShape -n startNode \
 *   | shexSpec/shex.js/bin/materialize -t targetSchema.shex [-j vars.json] [-r rootnode]
 *
 * See https://github.com/shexSpec for more information.
 */

const FS = require("fs");
const N3 = require("n3");

const ShExTerm = require("@shexjs/term");
const ShExUtil = require("@shexjs/util");
const ShExNode = require("@shexjs/node")({rdfjs: N3});
const Mapper = require("..")({rdfjs: N3});

const CommandLineOptions = [
  { name: "help", alias: "h", type: Boolean },
  { name: "jsonvars", alias: "j", type: String, typeLabel: "file", multiple: false, defaultValue: undefined, description: "json vars file" },
  { name: "root", alias: "r", type: String, typeLabel: "IRI", multiple: false, defaultValue: "tag:eric@w3.org/2016/root", description: "RDF root node IRI" },
  { name: "target", alias: "t", type: String, typeLabel: "file", multiple: false, defaultValue: undefined, description: "target shex file" },
];
const CLI = require("command-line-args")(CommandLineOptions);

function abort(msg) { 
  console.error(msg);
  console.error(require('command-line-usage')([
    {
      header: "materialize",
      content: "reads the validate schema output from STDIN and maps it to the specified target schema" },
    {
      header: 'Synopsis',
      content: [
        "materialize -t <target schema> | -h  [-j <JSON Vars File>] [-r <RDF root IRI>]"
      ]
    },
    {
      header: 'Options',
      optionList: CommandLineOptions
    },
    {
      header: 'Examples',
      content: [
        "materialize -h",
        "validate -x schema.shex -l data.jsonld -s Shape | materialize -t target.shex",
        "cat file.val | materialize -t target.shex -j vars.json -r https://www.w3.org/RDF"
      ]
    },
    {
      content: "Project home: " + require('chalk').underline("https://github.com/shexSpec/shex.js")
    }
  ]));
  process.exit(1);
}

const cmds = (function () {
  try {
    return CLI;
  } catch (e) {
    console.error(e.message);
    process.exit(1);
  }
})();

if (cmds.help) { 
   abort("");
}

if (typeof cmds.target === "undefined") {
  abort("\nNo ShEx target schema file specified.");
}

try {
  FS.accessSync(cmds.target, FS.r_OK);
  if (typeof cmds.jsonvars !== "undefined") {
    FS.accessSync(cmds.jsonvars, FS.r_OK);
  }
} catch (e) {
  console.error(e.message);
  process.exit(1);
}

Promise.all([ShExNode.load([cmds.target], [], [], [], {index: true}),
             new Promise((resolve, reject) => {
               const inputChunks = [];
               process.stdin.resume();
               process.stdin.setEncoding("utf8");       
       
               process.stdin.on("data", function (chunk) {
                 inputChunks.push(chunk);
               });

               process.stdin.on("end", function () {
                 resolve(JSON.parse(inputChunks.join('')));
               });
             }),
             new Promise((resolve, reject) => {
               cmds.jsonvars ?
                 FS.readFile(cmds.jsonvars, "utf8", function (err, data) {
                   if (err) reject(err);
                   if (data) resolve(JSON.parse(data));
                 }) :
               resolve({});
             })
            ]).
  then(loads => {
    const schema = loads[0].schema;
    const val = loads[1];
    const statics = loads[2];
    const emptySchema = {type: "Schema"};
    const fakeValidator = {
      schema: emptySchema,
      semActHandler: {
        results: {},
        register: () => {}
      }
    }
    // or use a throw-away validator:
    // const realValidator = require("@shexjs/validator").construct(emptySchema)

    const registered = Mapper.register(fakeValidator, {ShExTerm, ShExUtil})
    const map = registered.trivialMaterializer(schema);

    const resultBindings1 = ShExUtil.valToExtension(val, Mapper.url);

    function _dup (obj) { return JSON.parse(JSON.stringify(obj)); }

    let resultBindings2 = _dup(resultBindings1);
    const _t = _dup(statics);
    if (_t && Object.keys(_t).length > 0) {
      if (!Array.isArray(resultBindings2))
        resultBindings2 = [resultBindings2];
      resultBindings2.unshift(_t);
    }
    const outputGraph = map.materialize(registered.binder(resultBindings2), cmds.root);
    const writer = new N3.Writer({ prefixes: {} });
    outputGraph.getQuads().forEach(t => { writer.addQuad(t); });
    writer.end(function (error, result) { console.log(result); });
  }).catch(e => { console.error("stack" in e ? e.stack : e); });


