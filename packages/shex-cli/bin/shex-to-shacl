#!/usr/bin/env node

// shex-to-shacl http://tracker.example/schemas/Issue.shex

const ShExLoader = require("../lib/ShExLoader");
const ShExUtil = require("../lib/ShExUtil");
const N3 = require("n3");
const N3Store = N3.Store;
const N3Writer = N3.Writer();

// The next ID for new blank nodes
const blankNodePrefix = 0, blankNodeCount = 0;
function bnode () { return '_:b' + blankNodePrefix++ }

const Rdf = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
const firstP = Rdf+"first";
const restP = Rdf+"rest";
const nilP = Rdf+"nil";

const Sh = "http://www.w3.org/ns/shacl#";
const propertyP = Sh+"property";
const predicateP = Sh+"predicate";
const shapeP = Sh+"shape";
const inP = Sh+"in";
const stemP = Sh+"stem";
const andP = Sh+"and";
const orP = Sh+"or";
const notP = Sh+"not";

// Generate command line interface
const CLI = require("command-line-args")([
    { name: "help",  alias: "h", type: Boolean },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "json",  alias: "j", type: String, multiple:  true, defaultValue:   [] }
]);
function abort (msg) {
  console.error(msg);
  console.error(CLI.getUsage({
    title: "shex-to-json",
    description: "load some number of schema files from web or filesystem and display as JSON (ShExJ), for example:\n    shex-to-json http://tracker.example/schemas/Issue.shex",
    footer: "Project home: [underline]{https://github.com/shexSpec/shex.js}"
  }));
  process.exit(1);
}

// Extract user commands
const cmds = CLI.parse();
if (cmds.help)
    abort("");
if (cmds.shex.length === 0 && cmds.json.length === 0) abort("no shex specified");


ShExLoader.load(cmds.shex, cmds.json, [], []).then(function (loaded) {
  const db = new N3Store();//     [1,2,3].forEach(i => { db.addTriple("http://a.example/S", "http://a.example/p", "\""+i+"\""); }); 
  const ignored = [];
  function remove (ob, attr) {
    const ret = ob[attr];
    delete ob[attr];
    return ret;
  }
  function ignore (ob, attr) {
    if (attr in ob)
      ignored.push({type:ob.type, attr:attr, value:ob[attr]});
    delete ob[attr];
  }
  function empty (ob) {
    if (Array.isArray(ob)) {
      if (Object.keys(ob).length !== 0)
        throw Error("array not empty: " + JSON.stringify(ob));
    } else {
      if (Object.keys(ob).length !== 1 || !("type" in ob))
        throw Error("object not empty: " + JSON.stringify(ob));
    }
  }
  function byX (obj, key, name) {
    const args = Array.prototype.slice.call(arguments);
    args[0] = obj[key];
    args.splice(1, 2); // remove key, name
    const ret = eval(name() + ".apply(null, args)");
    empty(obj[key]);
    delete obj[key];
    return ret;
  }
  function byType (obj, key) {
    const args = Array.prototype.slice.call(arguments);
    args.splice(2, 0, function () { return obj[key].type; });
    return byX.apply(null, args);
  }
  function byAttr (obj, key) {
    const args = Array.prototype.slice.call(arguments);
    args.splice(2, 0, function () { return key; });
    return byX.apply(null, args);
  }

  function Schema (shapes) {
    Object.keys(shapes).forEach(key => {
      const label = byType(shapes, key, key);
      // db.addTriple("http://a.example/Schema", "hasShape", label);
    });
  }
  function Shape (shapeExpr, label) {
    const expr = byType(shapeExpr, "expression");
    db.addTriple(label, propertyP, expr);
    return label;
  }
  function TripleConstraint (tripleExpr) {
    const propN = bnode();
    db.addTriple(propN, predicateP, remove(tripleExpr, "predicate"));
    const r = byType(tripleExpr, "valueExpr", propN);
    return propN;
  }
  function list (l) {
    if (l.length === 0)
      return nilP;
    const tail = bnode(), head = tail, dirty = false;
    l.forEach(i => {
      if (dirty) {
        const n = bnode();
        db.addTriple(tail, restP, n);
        tail = n;
      }
      db.addTriple(tail, firstP, i);
      dirty = true;
    });
    db.addTriple(tail, restP, nilP);
    return head;
  }
  function NodeConstraint (nodeExpr, propN) {
    //    db.addTriple(propN, predicateP, remove(nodeExpr, "predicate"));
    const ors = [];
    //    db.addNode(propN, shapeP, shN);
    ["values"].map(attr => {
      if (attr in nodeExpr) {
        byAttr(nodeExpr, attr, propN, ors);
        remove(nodeExpr, attr);
      }
    });
    if (ors.length === 1)
      db.addTriple(propN, shapeP, ors[0]);
    else if (ors.length > 1) {
      const or = bnode();
      db.addTriple(propN, shapeP, or);
      db.addTriple(or, orP, list(ors));
    }
    return ors;
  }
  function values (obj, propN, ors) {
    const l = obj.splice(0, obj.length);
    const stemRanges = l.filter(ent => {
      return typeof ent !== "string" && ent.type === "StemRange";
    });
    function inOrStem (tz) {
      const ret = [];
      const ins = tz.filter(ent => {
        return typeof ent === "string";
      });
      const stems = tz.filter(ent => {
        return typeof ent !== "string" && ent.type === "Stem";
      });
      if (ins.length > 0) {
        const cN = bnode(), inN = bnode();
        db.addTriple(cN, inP, list(ins));
        ret.push(cN)
        
      }
      if (stems.length > 0) {
        const cN = bnode();
        ret.push(cN);
        stems.forEach(n => {
          db.addTriple(cN, stemP, n.stem);
        });
      }
      return ret;
    }
    ors.push(inOrStem(l));
    if (stemRanges.length > 0) {
      stemRanges.forEach(n => {
        const excls = ("exclusions" in n) ? remove(n, "exclusions") : [];
        const lst2 = excls.reduce((lst, ex) => {
          if (typeof ex === "string") {
            lst.ins.push(ex);
          } else {
            const not = bnode();
            db.addTriple(not, notP, inOrStem([ex])[0]);
            lst.excls.push(not);
          }
          return lst;
        }, {ins:[], excls:[]});
        if (lst2.ins.length > 0) {
          const not = bnode();
          const stin = bnode(); //, list = bnode();
          db.addTriple(not, notP, stin);
          db.addTriple(stin, inP, list(lst2.ins));
          lst2.excls.push(not);
        }
        if (lst2.excls.length) {
          const andN = bnode(), st = bnode();
          ors.push(andN);
          db.addTriple(andN, andP, list([st].concat(lst2.excls)));
          db.addTriple(st, stemP, n.stem);
        } else {
          const cN = bnode();
          ors.push(cN)
          db.addTriple(cN, stemP, n.stem);
        }
      });
    }
    return ors;
  }

  const schema = loaded.schema;
  ignore(schema, "base"); ignore(schema, "prefixes"); ignore(schema, "semActs"); ignore(schema, "start");
  Schema(loaded.schema.shapes);
  remove(schema, "shapes");
  empty(schema);
  const tz = db.getQuads(); // !!untested
  const w = require("n3").Writer({ prefixes: {
    my: "http://a.example/",
    sh: "http://www.w3.org/ns/shacl#"
  } });
  w.addTriples(tz);
  w.end(function (error, result) {
    console.log(result);
  });
}).catch(function (e) {
  console.error("aborting:",
                 e.stack ||
                e);
  process.exit(1);
})
