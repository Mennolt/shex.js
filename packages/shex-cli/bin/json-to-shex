#!/usr/bin/env node

// json-to-shex https://raw.githubusercontent.com/shexSpec/shexTest/master/parsedSchemas/open2dotOr1dotclose.json

const ShExNode = require("@shexjs/node");
const ShExWriter = require("@shexjs/writer"); // for verbose output

// Generate command line interface
var CommandLineOptions = [
    { name: "help",  alias: "h", type: Boolean },
    { name: "json",  alias: "j", type: String, multiple:  true, defaultValue:   [], defaultOption:  true },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue:   [] },
    { name: "prefixes",          type: String, multiple:  true, defaultValue:   [] }
];
var CLI = require("command-line-args")(CommandLineOptions);
function abort (msg) {
  console.error(msg);
  console.error(require('command-line-usage')([
    {
      header: "json-to-shex",
      content: "load some number of schema files from web or filesystem and display as ShEx compact syntax (ShExC), for example:\n    shex-to-json https://raw.githubusercontent.com/shexSpec/shexTest/master/parsedSchemas/open2dotOr1dotclose.json" },
    {
      header: 'Options',
      optionList: CommandLineOptions
    },
    {
      content: "Project home: " + require('chalk').underline("https://github.com/shexSpec/shex.js")
    }
  ]));
  process.exit(1);
}

// Extract user commands
var cmds = CLI;
if (cmds.help)
    abort("");
if (cmds.json.length === 0 && cmds.shex.length === 0) abort("no shex specified");

let options = { simplifyParentheses: true };
if (cmds.prefixes.length > 0) {
  let prefixes = cmds.prefixes.reduce(
    (pz, decl) => Object.assign(pz, JSON.parse(decl)), {}
  )
  options.prefixes = prefixes;
}


ShExNode.load(cmds.shex, cmds.json, [], []).then(function (loaded) {
  new ShExWriter(null, options).
    writeSchema(loaded.schema,
                function (error, text, prefixes) {
                  if (error) throw error;
                  else if (text) console.log(text);
                });
}).catch(function (e) {
  console.error("aborting:", e.stack || e);
  process.exit(1);
})

